#!/usr/bin/env python3
"""
WordPress Security Hardening Script for SphereVista360.com
Implements security best practices and configurations
"""

import os
import sys
import requests
import base64
import json
from typing import Dict, List, Optional

class WordPressSecurityHardener:
    def __init__(self):
        self.wp_site = os.environ.get('WP_SITE')
        self.wp_user = os.environ.get('WP_USER')
        self.wp_pass = os.environ.get('WP_APP_PASS')
        
        if not all([self.wp_site, self.wp_user, self.wp_pass]):
            raise ValueError("WordPress credentials not set")
        
        # Set up authentication
        credentials = f"{self.wp_user}:{self.wp_pass}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        self.headers = {
            'Authorization': f'Basic {encoded_credentials}',
            'Content-Type': 'application/json'
        }
        
        self.security_configs = {}
    
    def generate_htaccess_rules(self) -> str:
        """Generate security-focused .htaccess rules"""
        print("🔒 Generating .htaccess security rules...")
        
        htaccess_content = """# WordPress Security Hardening for SphereVista360
# Generated by WordPress Security Hardener

# Block access to sensitive files
<Files "wp-config.php">
    Order Allow,Deny
    Deny from all
</Files>

<Files "readme.html">
    Order Allow,Deny
    Deny from all
</Files>

<Files "readme.txt">
    Order Allow,Deny
    Deny from all
</Files>

<Files "wp-config-sample.php">
    Order Allow,Deny
    Deny from all
</Files>

<Files "install.php">
    Order Allow,Deny
    Deny from all
</Files>

# Block access to .htaccess itself
<Files ".htaccess">
    Order Allow,Deny
    Deny from all
</Files>

# Prevent directory browsing
Options -Indexes

# Protect wp-includes directory
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteRule ^wp-admin/includes/ - [F,L]
    RewriteRule !^wp-includes/ - [S=3]
    RewriteRule ^wp-includes/[^/]+\.php$ - [F,L]
    RewriteRule ^wp-includes/js/tinymce/langs/.+\.php - [F,L]
    RewriteRule ^wp-includes/theme-compat/ - [F,L]
</IfModule>

# Block suspicious request methods
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_METHOD} ^(HEAD|TRACE|DELETE|TRACK) [NC]
    RewriteRule ^(.*)$ - [F,L]
</IfModule>

# Protect against malicious URL requests
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !^/[0-9]+\..+\.cpaneldcv$
    RewriteCond %{REQUEST_URI} !^/\.well-known/pki-validation/[A-F0-9]{32}\.txt(?:\ Comodo\ DCV)?$
    RewriteCond %{HTTP_USER_AGENT} ^$ [OR]
    RewriteCond %{HTTP_USER_AGENT} ^(-|\.|') [OR]
    RewriteCond %{HTTP_USER_AGENT} ^(.*)(<|>|%3C|%3E)(.*) [NC,OR]
    RewriteCond %{HTTP_USER_AGENT} ^(java|curl|wget)(.*) [NC,OR]
    RewriteCond %{HTTP_USER_AGENT} ^(.*)(libwww-perl|curl|wget|python|nikto|wkito|pikto|scan|java|winhttp|clshttp|loader)(.*) [NC,OR]
    RewriteCond %{HTTP_USER_AGENT} ^(.*)(\bbot\b|\bBot\b|\bBOT\b)(.*) [NC]
    RewriteRule .* - [F]
</IfModule>

# Block access to wp-config.php and other sensitive files
<FilesMatch "(wp-config\.php|wp-config\.txt|changelog\.txt|readme\.txt|readme\.html|license\.txt)">
    Order Allow,Deny
    Deny from all
</FilesMatch>

# Security headers
<IfModule mod_headers.c>
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Permissions-Policy "geolocation=(), microphone=(), camera=()"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.googleapis.com *.gstatic.com; style-src 'self' 'unsafe-inline' *.googleapis.com; img-src 'self' data: *.gravatar.com *.w.org *.unsplash.com; font-src 'self' *.googleapis.com *.gstatic.com;"
</IfModule>

# Limit file upload size (adjust as needed)
<IfModule mod_php.c>
    php_value upload_max_filesize 10M
    php_value post_max_size 10M
    php_value max_execution_time 300
    php_value max_input_vars 3000
</IfModule>

# Block access to version control directories
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteRule ^\.git - [F,L]
    RewriteRule ^\.svn - [F,L]
    RewriteRule ^\.hg - [F,L]
    RewriteRule ^\.bzr - [F,L]
</IfModule>

# Prevent access to PHP error logs
<Files "error_log">
    Order Allow,Deny
    Deny from all
</Files>

<Files "php_errors.log">
    Order Allow,Deny
    Deny from all
</Files>

# WordPress security rules (keep existing WordPress rules)
# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

# Disable server signature
ServerSignature Off

# Hide server information
<IfModule mod_headers.c>
    Header unset Server
    Header unset X-Powered-By
    Header unset X-CF-Powered-By
    Header unset X-Mod-Pagespeed
    Header unset X-Pingback
</IfModule>
"""
        
        print("  ✅ File access restrictions")
        print("  ✅ Directory browsing protection")
        print("  ✅ Malicious request blocking")
        print("  ✅ Security headers implementation")
        print("  ✅ Upload size limitations")
        
        return htaccess_content
    
    def generate_wp_config_security(self) -> str:
        """Generate wp-config.php security additions"""
        print("⚙️ Generating wp-config.php security settings...")
        
        wp_config_security = """
// Security hardening for SphereVista360
// Add these lines to your wp-config.php file

// Disable file editing in WordPress admin
define('DISALLOW_FILE_EDIT', true);

// Disable file modifications
define('DISALLOW_FILE_MODS', false); // Set to true in production

// Force SSL for admin area
define('FORCE_SSL_ADMIN', true);

// Disable WordPress debug mode (set to false in production)
define('WP_DEBUG', false);
define('WP_DEBUG_LOG', false);
define('WP_DEBUG_DISPLAY', false);

// Increase memory limit if needed
define('WP_MEMORY_LIMIT', '256M');

// Set automatic update configuration
define('WP_AUTO_UPDATE_CORE', true);

// Disable XML-RPC (if not needed)
add_filter('xmlrpc_enabled', '__return_false');

// Remove WordPress version info
remove_action('wp_head', 'wp_generator');

// Disable pingbacks
add_filter('xmlrpc_methods', function($methods) {
    unset($methods['pingback.ping']);
    return $methods;
});

// Security keys (generate new ones at https://api.wordpress.org/secret-key/1.1/salt/)
// Replace existing AUTH_KEY, SECURE_AUTH_KEY, etc. with new ones

// Database security
define('DB_CHARSET', 'utf8mb4');
define('DB_COLLATE', '');

// Limit post revisions
define('WP_POST_REVISIONS', 3);

// Set cookie domain
define('COOKIE_DOMAIN', '.spherevista360.com');

// Additional security measures
define('MEDIA_TRASH', true);
define('EMPTY_TRASH_DAYS', 30);
"""
        
        print("  ✅ File editing disabled")
        print("  ✅ SSL enforcement")
        print("  ✅ Debug mode configuration")
        print("  ✅ XML-RPC protection")
        print("  ✅ WordPress version hiding")
        
        return wp_config_security
    
    def create_security_checklist(self) -> Dict:
        """Create comprehensive security checklist"""
        print("📋 Creating security implementation checklist...")
        
        checklist = {
            "immediate_actions": [
                {
                    "task": "Update WordPress core to latest version",
                    "priority": "critical",
                    "description": "Ensure WordPress is running the latest stable version"
                },
                {
                    "task": "Update all plugins and themes",
                    "priority": "critical", 
                    "description": "Check for and install all available updates"
                },
                {
                    "task": "Change default admin username",
                    "priority": "high",
                    "description": "Avoid using 'admin' or 'administrator' as username"
                },
                {
                    "task": "Implement strong passwords",
                    "priority": "critical",
                    "description": "Use complex passwords for all user accounts"
                },
                {
                    "task": "Enable two-factor authentication",
                    "priority": "high",
                    "description": "Add 2FA for all admin accounts"
                }
            ],
            "configuration_tasks": [
                {
                    "task": "Apply .htaccess security rules",
                    "priority": "high",
                    "description": "Upload generated .htaccess file to WordPress root"
                },
                {
                    "task": "Update wp-config.php security settings",
                    "priority": "high",
                    "description": "Add security configurations to wp-config.php"
                },
                {
                    "task": "Install security plugin",
                    "priority": "high",
                    "description": "Install and configure Wordfence or similar"
                },
                {
                    "task": "Set up automated backups",
                    "priority": "critical",
                    "description": "Configure daily automated backups"
                },
                {
                    "task": "Configure SSL certificate",
                    "priority": "critical",
                    "description": "Ensure HTTPS is properly configured"
                }
            ],
            "ongoing_maintenance": [
                {
                    "task": "Regular security scans",
                    "frequency": "weekly",
                    "description": "Run malware and vulnerability scans"
                },
                {
                    "task": "Monitor login attempts",
                    "frequency": "daily",
                    "description": "Review failed login attempts and blocked IPs"
                },
                {
                    "task": "Update security plugins",
                    "frequency": "as_available",
                    "description": "Keep security plugins updated immediately"
                },
                {
                    "task": "Review user accounts",
                    "frequency": "monthly",
                    "description": "Audit user permissions and remove unused accounts"
                },
                {
                    "task": "Backup verification",
                    "frequency": "monthly",
                    "description": "Test backup restoration process"
                }
            ]
        }
        
        print("  ✅ Immediate action items (5)")
        print("  ✅ Configuration tasks (5)")
        print("  ✅ Ongoing maintenance schedule")
        
        return checklist
    
    def generate_security_monitoring_script(self) -> str:
        """Generate monitoring script for security events"""
        print("🔍 Creating security monitoring script...")
        
        monitoring_script = """#!/bin/bash
# WordPress Security Monitoring Script for SphereVista360
# Run this script regularly to check for security issues

echo "🔍 WordPress Security Check - $(date)"
echo "=================================="

# Check for failed login attempts in access logs
echo "📊 Recent failed login attempts:"
if [ -f "/var/log/apache2/access.log" ]; then
    grep "wp-login.php" /var/log/apache2/access.log | grep -v "200" | tail -10
elif [ -f "/var/log/nginx/access.log" ]; then
    grep "wp-login.php" /var/log/nginx/access.log | grep -v "200" | tail -10
else
    echo "   No web server logs found"
fi

echo ""

# Check WordPress core files integrity
echo "🔧 WordPress core integrity:"
if command -v wp &> /dev/null; then
    wp core verify-checksums --path=/var/www/html
else
    echo "   WP-CLI not available - manual check required"
fi

echo ""

# Check for suspicious files
echo "🚨 Suspicious file check:"
find /var/www/html -name "*.php" -type f -newer /tmp/last_check 2>/dev/null | head -10
echo "   Files modified since last check (showing first 10)"

# Update timestamp for next check
touch /tmp/last_check

echo ""

# Check disk space
echo "💾 Disk space usage:"
df -h | grep -E "(/$|/var)"

echo ""

# Check for WordPress updates
echo "🔄 Update status:"
if command -v wp &> /dev/null; then
    wp core check-update --path=/var/www/html
    wp plugin list --update=available --path=/var/www/html
    wp theme list --update=available --path=/var/www/html
else
    echo "   WP-CLI not available - check admin dashboard"
fi

echo ""
echo "✅ Security check complete"
echo "📝 Review results and take necessary actions"
"""
        
        print("  ✅ Failed login monitoring")
        print("  ✅ WordPress core integrity check")
        print("  ✅ Suspicious file detection")
        print("  ✅ Update status monitoring")
        
        return monitoring_script
    
    def create_incident_response_plan(self) -> Dict:
        """Create security incident response plan"""
        print("🚨 Creating incident response plan...")
        
        response_plan = {
            "detection_indicators": [
                "Unusual traffic patterns or spikes",
                "Failed login attempts from multiple IPs",
                "Suspicious file modifications",
                "Unexpected admin users",
                "Website defacement or content changes",
                "Performance degradation",
                "SEO spam or malicious redirects"
            ],
            "immediate_response": [
                {
                    "step": 1,
                    "action": "Assess the situation",
                    "description": "Determine the scope and nature of the incident"
                },
                {
                    "step": 2,
                    "action": "Isolate affected systems",
                    "description": "Take compromised site offline if necessary"
                },
                {
                    "step": 3,
                    "action": "Preserve evidence",
                    "description": "Backup current state before making changes"
                },
                {
                    "step": 4,
                    "action": "Change all passwords",
                    "description": "Update WordPress, hosting, and database passwords"
                },
                {
                    "step": 5,
                    "action": "Scan for malware",
                    "description": "Run comprehensive security scans"
                }
            ],
            "recovery_steps": [
                {
                    "step": 1,
                    "action": "Restore from clean backup",
                    "description": "Use most recent verified clean backup"
                },
                {
                    "step": 2,
                    "action": "Update all software",
                    "description": "Ensure WordPress, plugins, and themes are current"
                },
                {
                    "step": 3,
                    "action": "Harden security",
                    "description": "Implement additional security measures"
                },
                {
                    "step": 4,
                    "action": "Monitor closely",
                    "description": "Increase monitoring for 30 days post-incident"
                },
                {
                    "step": 5,
                    "action": "Document lessons learned",
                    "description": "Update security procedures based on incident"
                }
            ],
            "emergency_contacts": {
                "hosting_provider": "Contact hosting support immediately",
                "security_expert": "Consider hiring security consultant",
                "legal_counsel": "If data breach involves personal information",
                "law_enforcement": "For serious criminal activity"
            }
        }
        
        print("  ✅ Detection indicators defined")
        print("  ✅ Immediate response protocol")
        print("  ✅ Recovery procedure outlined")
        print("  ✅ Emergency contacts identified")
        
        return response_plan
    
    def run_security_hardening(self):
        """Execute complete security hardening process"""
        print("🛡️ WordPress Security Hardening")
        print("=" * 35)
        print(f"🌐 Target site: {self.wp_site}")
        print()
        
        # Generate all security components
        htaccess_rules = self.generate_htaccess_rules()
        wp_config_security = self.generate_wp_config_security()
        security_checklist = self.create_security_checklist()
        monitoring_script = self.generate_security_monitoring_script()
        incident_response = self.create_incident_response_plan()
        
        # Save all files
        with open('security_htaccess.txt', 'w') as f:
            f.write(htaccess_rules)
        print("💾 .htaccess rules saved to: security_htaccess.txt")
        
        with open('wp_config_security.txt', 'w') as f:
            f.write(wp_config_security)
        print("💾 wp-config security settings saved to: wp_config_security.txt")
        
        with open('security_checklist.json', 'w') as f:
            json.dump(security_checklist, f, indent=2)
        print("💾 Security checklist saved to: security_checklist.json")
        
        with open('security_monitor.sh', 'w') as f:
            f.write(monitoring_script)
        os.chmod('security_monitor.sh', 0o755)
        print("💾 Monitoring script saved to: security_monitor.sh")
        
        with open('incident_response_plan.json', 'w') as f:
            json.dump(incident_response, f, indent=2)
        print("💾 Incident response plan saved to: incident_response_plan.json")
        
        print(f"\n🎉 Security Hardening Complete!")
        print("=" * 35)
        
        # Summary of critical actions
        critical_count = len([task for task in security_checklist['immediate_actions'] 
                            if task['priority'] == 'critical'])
        high_count = len([task for task in security_checklist['immediate_actions'] 
                         if task['priority'] == 'high'])
        
        print(f"🚨 Critical tasks: {critical_count}")
        print(f"⚠️ High priority tasks: {high_count}")
        print()
        
        print("📋 Next Steps:")
        print("1. Review and implement security_checklist.json items")
        print("2. Upload .htaccess rules to WordPress root directory")
        print("3. Add wp-config security settings to wp-config.php")
        print("4. Set up automated monitoring with security_monitor.sh")
        print("5. Install and configure Wordfence security plugin")
        print("6. Test all changes on staging environment first")
        
        return True

def main():
    """Main execution function"""
    # Check environment variables
    required_vars = ['WP_SITE', 'WP_USER', 'WP_APP_PASS']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print("❌ Missing environment variables:")
        for var in missing_vars:
            print(f"   export {var}='your_value'")
        print("\n⚠️ Running in configuration-only mode")
        
        # Run without WordPress API access
        hardener = WordPressSecurityHardener.__new__(WordPressSecurityHardener)
        hardener.wp_site = "spherevista360.com"
        hardener.security_configs = {}
        return hardener.run_security_hardening()
    
    try:
        hardener = WordPressSecurityHardener()
        return hardener.run_security_hardening()
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

if __name__ == "__main__":
    main()